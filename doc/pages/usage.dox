/**


@page usage Usage
@tableofcontents


<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section base_class Abstract Barcode Class

The abstract glbarcode::Barcode class is the base class for all glbarcode++ barcode types.  This class provides the core
interface for these implementations.



<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section barcode_classes Concrete Barcode Classes

The first step in generating a barcode is accomplished by instantiating the appropriate concrete barcode class.
These concrete classes are derived from the glbarcode::Barcode base class.  glbarcode++ currently includes the following concrete
barcode classes:

| Class                          | Symbology       | Type ID       | Notes       |
|--------------------------------|-----------------|---------------|-------------|
| glbarcode::BarcodeCode39       | Code39          | "code39"      | |
| glbarcode::BarcodeCode39Ext    | Extended Code39 | "code39ext"   | Code39 with extended encoding to support full ASCII data. |
| glbarcode::BarcodeUpcA         | UPC-A           | "upc-a"       | |
| glbarcode::BarcodeEan13        | EAN-13          | "ean-13"      | |
| glbarcode::BarcodeOnecode      | USPS ONECODE    | "onecode"     | |
| glbarcode::BarcodePostnet      | USPS POSTNET    | "postnet"     | Supports all valid USPS data lengths: 5, 8 and 11. |
| glbarcode::BarcodePostnet5     | USPS POSTNET-5  | "postnet-5"   | Only supports data length of 5 (ZIP only) |
| glbarcode::BarcodePostnet9     | USPS POSTNET-9  | "postnet-9"   | Only supports data length of 9 (ZIP+4) |
| glbarcode::BarcodePostnet11    | USPS POSTNET-11 | "postnet-11"  | Only supports data length of 11 (ZIP+4+DC) |
| glbarcode::BarcodeCepnet       | CEPNET          | "cepnet"      | Brazilian Post barcode.  Based on USPS POSTNET. |
| glbarcode::BarcodeDataMatrix   | Data Matrix     | "datamatrix"  | Data Matrix IEC16022 ECC 200 |
| glbarcode::BarcodeQrcode       | QR Code         | "qrcode"      | Simple front-end to libqrencode. |

For example, to instantiate a Code39 barcode object:

@code{.cpp}
#include <glbarcode/BarcodeCode39.h>
	 
glbarcode::BarcodeCode39 bc;
@endcode


<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section the_factory The Barcode Factory

Barcodes can also be instantiated using the glbarcode::Factory barcode factory.

A list (@c TypeIdList) of supported barcode type IDs can be obtained with the @c getSupportedTypes() method.  A type ID is
simply a standard string (std::string).
For example:

@code{.cpp}
glbarcode::TypeIdList typeIds = glbarcode::Factory::getSupportedTypes();
 	
for ( glbarcode::TypeIdList::iterator iter = typeIds.begin(); iter != typeIds.end(); iter++ )
{
    std::cerr << *iter << std::endl;
}
@endcode

Finally, a barcode is instantiated using the @c createBarcode() method. For example, to instantiate a Code39 barcode object:

@code{.cpp}
glbarcode::Barcode *bc = glbarcode::Factory::createBarcode( "code39" );
@endcode

where "code39" is the corresponding type ID string from the table in @ref barcode_classes.
Valid IDs can also be obtained using the @c getSupportedTypes() method as described above.



<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section options Options

The glbarcode::Barcode class currently supports the following options that may be applied to any barcode type:

@li @b showText is a boolean option to control whether or not text is included in the final barcode rendering.  This option
    is not honored by all barcode types.

@li @b checksum is a boolean option to control whether or not a checksum or check digit is automatically generated for the barcode.
    This option is not honored by all barcode types.

Options are set using the appropriate @a set accessor methods.  These @a set accessors are designed to allow chaining of multiple
accessors as in the following example code:

@code{.cpp}
using namespace glbarcode;
 
BarcodeCode39 bc;
 
...
 
/* Set options. */
bc.setChecksum(true).setShowText(true);
@endcode

Options can also be queried using the appropriate @a get accessors, as in the following example code:

@code{.cpp}
using namespace glbarcode;
 
BarcodeCode39 bc;
 
...
 
bool textFlag = bc.showText(); /* Is the showText option set? */
@endcode


Individual concrete barcode classes may also implement options specific to its barcode type or symbology.



<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section building Building Barcodes

A barcode is "built" using the glbarcode::Barcode::build() method:

@code{.cpp}
glbarcode::Barcode::build( std::string data,
                           double      w,
                           double      h );
@endcode

where

@li @c data is a @c string containing the raw barcode data to be encoded

@li @c w is the requested width of the barcode in @a points (1 @a point = 1/72 @a inch).  This parameter is only a suggestion --
    the actual width of the resulting barcode may differ due to requirements for minimum symbol sizes for the specific symbology
    standard.  Setting w=0 will allow the barcode's height to be autosized based on a nominal symbol size.

@li @c h is the requested height of the barcode in @a points (1 @a point = 1/72 @a inch).  This parameter is only a suggestion --
    the actual height of the resulting barcode may differ due to requirements for minimum symbol sizes for the specific symbology
    standard.  Setting w=0 will allow the barcode's height to be autosized based on a nominal symbol size.



<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section rendering Rendering Barcodes

Barcodes are rendered using the glbarcode::Barcode::render() method:

@code{.cpp}
void glbarcode::Barcode::render( glbarcode::Renderer & renderer );
@endcode

where

@li @c renderer is a glbarcode::Renderer.

glbarcode++ currently provides the following renderers:

| Class                    | Description          |
|--------------------------|----------------------|
| glbarcode::RendererDebug | A renderer that simply prints drawing information to @c stdout. |
| glbarcode::RendererSvg   | Scalable Vector Graphics (SVG) renderer.  Can render to a given filename or to @c stdout. |
| glbarcode::RendererEps   | Encapsolated Postscript (EPS) renderer.  Can render to a given filename or to @c stdout. |

For example, the following will render @c barcode to an SVG file named "example.svg":

@code{.cpp}
using namespace glbarcode;
 
Barcode *barcode = ...
 
barcode->render( RendererSvg().filename( "example.svg" ) );
@endcode



<!-- -------------------------------------------------------------------------------------------------------------------------- -->
@section putting_together Putting It All Together

The following simple program will create a Code39 barcode object encoding the data "EXAMPLE-123" and rendering it to an SVG file
named "Example.svg":

@include usage-example-1.cpp

This example will produce the following SVG file:

@image html Example.svg Output of above example 'Example.svg'



<!-- -------------------------------------------------------------------------------------------------------------------------- -->

*/