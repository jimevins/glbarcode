/**

@page impl_barcodes Implementing Barcodes


Creating new barcode types (or symbologies) is accomplished by implementing a subclass of the abstract glbarcode::Barcode class.



Virtual Methods
---------------

A barcode subclass must implement the following virtual methods (or callbacks):

- glbarcode::Barcode::validate() -- The validate method is used to test if data is valid for encoding with the intended symbology.
  This method must only validate data that can be encoded successfully as-is or after processing by the optional
  glbarcode::Barcode::preprocess() method.

- glbarcode::Barcode::encode() -- The encode method is used to encode data such that it can later be vectorized.  The encoded is usually
  a list of characters that represent an atomic barcode element.  For example, the following is the character encoding used by
  the Code39 implementation:

  <center>
  | Character | Meaning                           |
  |:---------:|:----------------------------------|
  | N         | A narrow bar.                     |
  | W         | A wide bar.                       |
  | n         | A narrow space (gap between bars) |
  | w         | A wide space (gap between bars)   |
  | i         | Inter-symbol gap                  |
  </center>

  Other encoding examples can be found in the existing barcode implementations.

- glbarcode::Barcode::vectorize() -- The vectorize method converts the encoded data into a list of @ref drawing_primitives
  suitable for rendering.  The following protected methods are available to the vectorize implementation to create this list:

  - glbarcode::Barcode::add_line()
  - glbarcode::Barcode::add_box()
  - glbarcode::Barcode::add_text()
  - glbarcode::Barcode::add_ring()
  - glbarcode::Barcode::add_hexagon()

  Additionally, if the actual size of the vectorized barcode is different from the requested size, the vectorize method should
  call the following methods:

  - glbarcode::Barcode::set_width()
  - glbarcode::Barcode::set_height()

A barcode subclass may also need to implement the following virtual methods:

- glbarcode::Barcode::preprocess() -- The preprocess method performs any transformation of the data needed before encoding.  This
  method may be needed to perform a first-pass encoding to translate an extended alphabet into a simpler one.  For example, this could
  be as simple as upshifting lowercase letters into uppercase if the symbology only supports uppercase. It is assumed that the data
  passed to this method has already been validated with the glbarcode::Barcode::validate() method.

- glbarcode::Barcode::prepare_text() -- The prepare_text method performs any transformation of the data needed before it can be displayed.

The following figure illustrates the data flow between these methods:

@dot
digraph init {
	rankdir=TD;

	node [shape=plaintext style=solid fontsize=8];
	raw_data;
	primitives [label="\"Drawing\nPrimitives\""];

	node [shape=box style=solid];
	validate     [label=validate     URL="@ref glbarcode::Barcode::validate()"    ]; 

	node [shape=box style=solid];
	preprocess   [label=preprocess   URL="@ref glbarcode::Barcode::preprocess()"  ];
	encode       [label=encode       URL="@ref glbarcode::Barcode::encode()"      ];
	prepare_text [label=prepare_text URL="@ref glbarcode::Barcode::prepare_text()"];
	vectorize    [label=vectorize    URL="@ref glbarcode::Barcode::vectorize()"   ];

	node [shape=plaintext style=solid fontcolor="gray"];
	null1 [label=""];
	null2 [label=""];
	step1 [label="Step 1"];
	step2 [label="Step 2"];
	step3 [label="Step 3"];
	step4 [label="Step 4"];

	{rank=same; step1 validate}
	{rank=same; step2 preprocess}
	{rank=same; step3 encode prepare_text}
	{rank=same; step4 vectorize}

	null1 -> step1 -> step2 -> step3 -> step4 -> null2 [style=solid color="gray"];

	raw_data -> validate;
	validate -> preprocess;
	validate -> prepare_text;
	preprocess -> encode [label=cooked_data fontsize=8];
	encode -> vectorize [label=encoded_data fontsize=8];
	prepare_text -> vectorize [label=display_text fontsize=8];
	vectorize -> primitives;
}
@enddot



Constructors
------------

Barcode implementations should implement a constructor with the following signature:

@code{.cpp}
BarcodeXxx( std::string                      data,
	    double                           w,
            double                           h,
            glbarcode::BarcodeOptions const& options );
@endcode

This constructor should call the glbarcode::Barcode::build() method to do the actual initialization and building of the barcode:

@code{.cpp}
using namespace glbarcode;
 
BarcodeXxx( std::string           data,
	    double                w,
            double                h,
            BarcodeOptions const& options )
{
	build( data, w, h, options );
}
@endcode




Registering With The Barcode Factory
------------------------------------

To be able to register a barcode type with the barcode factory, it must implement a static create method that returns a pointer to a
newly allocated barcode:

@code{.cpp}
using namespace glbarcode;
 
Barcode* BarcodeXxx::create( std::string           data,
                             double                w,
                             double                h,
                             BarcodeOptions const& options )
{
        return new BarcodeXxx( data, w, h, options );
}
@endcode

This is used to register the barcode using glbarcode::BarcodeFactory::register_type:

@code{.cpp}
using namespace glbarcode;
 
BarcodeFactory::register_type( "xxx", &BarcodeXxx::create )
@endcode


Full Example
------------

As a complete example, the following is the glbarcode++ implementation of the Code39 barcode type.

BarcodeCode39.h:
@includelineno BarcodeCode39.h

BarcodeCode39.cpp:
@includelineno BarcodeCode39.cpp

Finally, as a built-in barcode type, the Code39 barcode type is registered in the glbarcode::BarcodeFactory::init() method using the
glbarcode::BarcodeFactory::register_type() method:

@code
#include <glbarcode/BarcodeCode39.h>
 
namespace glbarcode
{
	...

	void BarcodeFactory::init( void )
	{
		register_type( "code39",      &BarcodeCode39::create );
		...
	}
 
}
@endcode


*/