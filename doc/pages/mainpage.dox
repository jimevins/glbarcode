/**


@mainpage Overview

glbarcode++ is a C++ port of the glabels barcode library.


@section usage Basic Usage

@verbatim
#include <glbarcode/BarcodeFactory.h>;
#include <glbarcode/RendererSvg.h>;

void example( const std::string & data )
{
        using namespace glbarcode;

	/* Get singleton instance to barcode factory. */
        BarcodeFactory *factory = BarcodeFactory().instance();

        /* Create a "Code39" barcode object for data. */
        Barcode *bc = factory->create_barcode( "code39", data, 0, 0,
                                                BarcodeOptions()
                                                  .checksum(true)
                                                  .show_text(true) );

        /* Render barcode to SVG on standard output. */
        bc->render( RendererSvg() );

        delete bc;
}
@endverbatim



@section extending Extending glbarcode++


@subsection new_barcode_types Implementing new barcode types

@dot
digraph init {
	rankdir=LR;

	node [shape=plaintext style=solid fontsize=8];
	raw_data;
	primitives [label="\"Drawing Primitives\""];

	node [shape=box style=solid];
	validate     [label=validate     URL="@ref glbarcode::Barcode::validate()"    ]; 
	preprocess   [label=preprocess   URL="@ref glbarcode::Barcode::preprocess()"  ];
	encode       [label=encode       URL="@ref glbarcode::Barcode::encode()"      ];
	prepare_text [label=prepare_text URL="@ref glbarcode::Barcode::prepare_text()"];
	vectorize    [label=vectorize    URL="@ref glbarcode::Barcode::vectorize()"   ];

	node [shape=plaintext style=solid fontcolor="gray"];
	null1 [label=""];
	null2 [label=""];
	step1 [label="Step 1"];
	step2 [label="Step 2"];
	step3 [label="Step 3"];
	step4 [label="Step 4"];

	{rank=same; step1 validate}
	{rank=same; step2 preprocess}
	{rank=same; step3 encode prepare_text}
	{rank=same; step4 vectorize}

	null1 -> step1 -> step2 -> step3 -> step4 -> null2 [style=solid color="gray"];

	raw_data -> validate;
	raw_data -> preprocess;
	raw_data -> prepare_text;
	preprocess -> encode [label=cooked_data fontsize=8];
	encode -> vectorize [label=encoded_data fontsize=8];
	prepare_text -> vectorize [label=display_text fontsize=8];
	vectorize -> primitives;
}
@enddot

The barcode subclass must implement the following virtual methods:
<ul>
	<li>glbarcode::Barcode::validate()
	<li>glbarcode::Barcode::encode()
	<li>glbarcode::Barcode::vectorize()
</ul>
The barcode subclass may also need to implement the following virtual methods:
<ul>
	<li>glbarcode::Barcode::preprocess()
	<li>glbarcode::Barcode::prepare_text()
</ul>


@subsection implementing_renderers Implementing Renderers

The internal structure of a glbarcode::Barcode contains a simple vectorized representation of the
barcode.  This representation is simply a list of device-independent and barcode-type-independent
drawing primitives.  New renderers can be created by simply extending the glbarcode::Renderer base class.  
The glbarcode::Renderer baseclass simply traverses this list of drawing primitives and calls the
appropriate virtual method to translate into native drawing commands for the target format or
drawing context.

The renderer must implement the following virtual methods:
<ul>
	<li>glbarcode::Renderer::draw_begin()
	    Initialize drawing of barcode.
	<li>glbarcode::Renderer::draw_end()
	    Finalize drawing of barcode.
	<li>glbarcode::Renderer::draw_line()
	    Draw or render glbarcode::DrawingPrimitiveLine.
	    @image html figure-primitive-line.svg "Line primitive properties"
	<li>glbarcode::Renderer::draw_box()
	    Draw or render glbarcode::DrawingPrimitiveBox.
	    @image html figure-primitive-box.svg "Box primitive properties"
	<li>glbarcode::Renderer::draw_text()
	    Draw or render glbarcode::DrawingPrimitiveText.
	    @image html figure-primitive-text.svg "Text primitive properties"
	<li>glbarcode::Renderer::draw_ring()
	    Draw or render glbarcode::DrawingPrimitiveRing.
	<li>glbarcode::Renderer::draw_hexagon()
	    Draw or render glbarcode::DrawingPrimitiveHexagon.
</ul>

The following is a simple example of a renderer for a fictitious drawing library called "xxx":

@verbatim
#include "Renderer.h"

#include <cstdio>
#include <xxx.h>


/**
 * Xxx renderer implementation
 */
class RendererXxx : public Renderer
{
public:
	RendererXxx( XxxContext & xc )
	{
		m_xc = xc;
	}

private:

        void draw_begin( double w, double h )
        {
                xxx_open( m_xc, w, h );
        }


        void draw_end( void )
        {
                xxx_close( m_xc );
        }


        void draw_line( DrawingPrimitiveLine *line )
        {
                xxx_draw_line( m_xc, line->x + line->w/2, line->y, line->w, line->h );
        }


        void draw_box( DrawingPrimitiveBox *box )
        {
                xxx_draw_rect( m_xc, box->x, box->y, box->w, box->h );
        }


        void draw_text( DrawingPrimitiveText *text )
        {
                xxx_draw_text( m_xc, text->x, text->y, text->fsize, text->s.c_str() );
        }


        void draw_ring( DrawingPrimitiveRing *ring )
        {
                xxx_draw_circle( m_xc, ring->x, ring->y, ring->r, ring->lwidth );
        }


        void draw_hexagon( DrawingPrimitiveHexagon *hexagon )
        {
                xxx_draw_hexagon( m_xc, hexagon->x, hexagon->y, hexagon->h );
        }


	XxxContext & m_xc;

};
@endverbatim




*/